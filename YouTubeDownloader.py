import aiohttp
import asyncio
import io
import subprocess
import os
from hikka import loader, utils
from telethon.tl.types import Message, DocumentAttributeVideo

__version__ = (1, 0, 0)

#       ‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 
#       ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      
#       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      
#       ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      
#       ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
#
#              ¬© Copyright 2025
#           https://t.me/apcecoc
#
# üîí      Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# meta developer: @apcecoc
# scope: hikka_only
# scope: hikka_min 1.2.10

@loader.tds
class YouTubeDownloaderMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å YouTube —á–µ—Ä–µ–∑ API PaxSenix"""

    strings = {
        "name": "YouTubeDownloader",
        "no_url": "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ URL –≤–∏–¥–µ–æ! –ü—Ä–∏–º–µ—Ä: .ytdl https://www.youtube.com/watch?v=dQw4w9WgXcQ",
        "fetching_qualities": "‚è≥ –ü–æ–ª—É—á–∞—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤–∏–¥–µ–æ...",
        "select_quality": "üé• –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:\n\n{qualities}",
        "invalid_quality": "‚ùå –í—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        "processing": "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∏–¥–µ–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ {quality}...",
        "loading_animation": "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞... ({seconds} —Å–µ–∫)",
        "download_success": "‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n\nüé¨ –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\nüìè –†–∞–∑–º–µ—Ä: {size} MB\nüìê –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {resolution}",
        "failed": "‚ùå –û—à–∏–±–∫–∞: {error}. –ü—Ä–æ–±—É—é —Å–Ω–æ–≤–∞...",
        "max_retries": "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        "download_failed": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ.",
        "api_error": "‚ùå –û—à–∏–±–∫–∞ API: {error}",
        "invalid_response": "‚ùå API –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, HTML). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        "format_warning": "‚ö†Ô∏è –ï—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è, —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º –∫–æ–¥–µ–∫–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, VP9). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –ø–ª–µ–µ—Ä."
    }

    def __init__(self):
        self.base_url = "https://api.paxsenix.biz.id"
        self.session = None
        self.max_retries = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ "failed"
        self.task_retries = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ /task/{jobId}

    async def client_ready(self, client, db):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        self.client = client
        self.db = db
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
            "Accept": "application/json"
        }
        self.session = aiohttp.ClientSession(headers=headers)

    async def on_unload(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è"""
        if self.session:
            await self.session.close()

    def get_video_resolution(self, video_content: io.BytesIO) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é ffprobe (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_filename = "temp_video.mp4"
            with open(temp_filename, "wb") as f:
                f.write(video_content.getvalue())

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ffprobe –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            result = subprocess.run(
                ["ffprobe", "-v", "error", "-select_streams", "v:0", "-show_entries", "stream=width,height", "-of", "json", temp_filename],
                capture_output=True,
                text=True
            )
            metadata = eval(result.stdout)  # –ü–∞—Ä—Å–∏–º JSON-–≤—ã–≤–æ–¥ ffprobe
            width = metadata["streams"][0]["width"]
            height = metadata["streams"][0]["height"]
            os.remove(temp_filename)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            return f"{width}x{height}"
        except Exception as e:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    def estimate_dimensions(self, quality: str) -> tuple:
        """–û—Ü–µ–Ω–∫–∞ —à–∏—Ä–∏–Ω—ã –∏ –≤—ã—Å–æ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞"""
        quality = quality.lower().replace("p", "")
        dimensions = {
            "144": (256, 144),
            "240": (426, 240),
            "360": (640, 360),
            "480": (854, 480),
            "720": (1280, 720),
            "1080": (1920, 1080),
            "1440": (2560, 1440),
            "2160": (3840, 2160)
        }
        return dimensions.get(quality, (1280, 720))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 720p

    async def download_video(self, url: str, title: str, call) -> io.BytesIO:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ URL –±–µ–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        async with self.session.get(url, timeout=600) as response:
            response.raise_for_status()
            total_size = int(response.headers.get('content-length', 0))
            downloaded = 0
            video_content = io.BytesIO()

            async for chunk in response.content.iter_chunked(1024 * 1024):
                if chunk:
                    downloaded += len(chunk)
                    video_content.write(chunk)

            video_content.seek(0)
            video_content.name = f"{title}.mp4"  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .mp4
            return video_content, downloaded

    async def get_available_qualities(self, youtube_url: str) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –≤–∏–¥–µ–æ"""
        url = f"{self.base_url}/dl/ytmp4"
        params = {"url": youtube_url}

        async with self.session.get(url, params=params) as response:
            content_type = response.headers.get('content-type', '').lower()
            if 'application/json' not in content_type:
                return []

            data = await response.json()
            if not data.get("ok") and "qualities" in data:
                return data["qualities"]
            return []

    async def start_download(self, youtube_url: str, quality: str) -> dict:
        """–ó–∞–ø—É—Å–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º"""
        url = f"{self.base_url}/dl/ytmp4"
        params = {"url": youtube_url, "quality": quality}

        async with self.session.get(url, params=params) as response:
            content_type = response.headers.get('content-type', '').lower()
            if 'application/json' not in content_type:
                return None

            data = await response.json()
            if data.get("ok"):
                return {
                    "jobId": data.get("jobId"),
                    "task_url": data.get("task_url")
                }
            return None

    async def check_task_status(self, task_url: str, call) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –∑–∞–≥—Ä—É–∑–∫–∏"""
        seconds = 0
        attempt = 0

        while attempt < self.task_retries:
            try:
                async with self.session.get(task_url, timeout=30) as response:
                    content_type = response.headers.get('content-type', '').lower()
                    if 'application/json' not in content_type:
                        await call.edit(self.strings["invalid_response"])
                        attempt += 1
                        await asyncio.sleep(5)
                        continue

                    data = await response.json()

                    if data.get("status") == "pending":
                        await call.edit(
                            self.strings["loading_animation"].format(seconds=seconds)
                        )
                        await asyncio.sleep(7)
                        seconds += 7
                    elif data.get("status") == "done":
                        return {
                            "success": True,
                            "title": data["info"]["title"],
                            "url": data["url"]
                        }
                    elif data.get("status") == "failed":
                        return {
                            "success": False,
                            "error": data.get("result", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                        }
                    else:
                        return {
                            "success": False,
                            "error": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏"
                        }

            except aiohttp.ClientError as e:
                attempt += 1
                await call.edit(self.strings["api_error"].format(error=str(e)))
                if attempt < self.task_retries:
                    await asyncio.sleep(5)
                continue

        return {
            "success": False,
            "error": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ"
        }

    @loader.command()
    async def ytdl(self, message: Message):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å YouTube. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .ytdl <url>"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["no_url"])
            return

        youtube_url = args.strip()
        await utils.answer(message, self.strings["fetching_qualities"])

        qualities = await self.get_available_qualities(youtube_url)
        if not qualities:
            await utils.answer(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è!")
            return

        markup = []
        for q in qualities:
            markup.append([{
                "text": f"{q}p",
                "callback": self.ytdl_select,
                "args": (q, youtube_url)
            }])

        await self.inline.form(
            message=message,
            text=self.strings["select_quality"].format(qualities="\n".join(f"- {q}p" for q in qualities)),
            reply_markup=markup
        )

    async def ytdl_select(self, call, quality: str, youtube_url: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞"""
        await call.edit(self.strings["processing"].format(quality=quality))

        for attempt in range(self.max_retries):
            task_data = await self.start_download(youtube_url, quality)
            if not task_data:
                await call.edit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ!")
                return

            result = await self.check_task_status(task_data["task_url"], call)
            if result["success"]:
                try:
                    # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä
                    video_content, size = await self.download_video(result["url"], result["title"], call)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ (–µ—Å–ª–∏ ffprobe –¥–æ—Å—Ç—É–ø–µ–Ω)
                    resolution = self.get_video_resolution(video_content)
                    video_content.seek(0)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏

                    # –û—Ü–µ–Ω–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∏ –≤—ã—Å–æ—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—á–µ—Å—Ç–≤–∞
                    width, height = self.estimate_dimensions(quality)

                    # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –≤–∏–¥–µ–æ
                    attributes = [
                        DocumentAttributeVideo(
                            duration=0,  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ –±–µ–∑ ffprobe
                            w=width,
                            h=height,
                            supports_streaming=True
                        )
                    ]

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ —á–∞—Ç
                    await self._client.send_file(
                        call.form["chat"],
                        video_content,
                        caption=self.strings["download_success"].format(
                            title=result["title"],
                            size=size // 1024 // 1024,
                            resolution=resolution
                        ) + "\n" + self.strings["format_warning"],
                        attributes=attributes,
                        supports_streaming=True,
                        mime_type="video/mp4"
                    )
                    await call.delete()
                    return
                except Exception as e:
                    await call.edit(self.strings["download_failed"])
                    return
            else:
                await call.edit(
                    self.strings["failed"].format(error=result["error"])
                )
                if attempt == self.max_retries - 1:
                    await call.edit(self.strings["max_retries"])
                    return
                await asyncio.sleep(2)